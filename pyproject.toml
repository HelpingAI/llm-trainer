[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llm-trainer"
dynamic = ["version", "authors"]
description = "A complete framework for training Large Language Models from scratch"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = [
    "llm", "language-model", "transformer", "pytorch", "deep-learning",
    "nlp", "machine-learning", "training", "inference", "tokenizer",
    "bpe", "wordpiece", "huggingface", "safetensors"
]
dependencies = [
    # Core ML libraries
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    
    # Hugging Face ecosystem
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "tokenizers>=0.13.0",
    "accelerate>=0.20.0",
    
    # Data processing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    
    # Visualization and monitoring
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "tensorboard>=2.13.0",
    "wandb>=0.15.0",
    
    # Utilities
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "omegaconf>=2.3.0",
]

[project.scripts]
llm-train = "llm_trainer.scripts.train:main"
llm-generate = "llm_trainer.scripts.generate:main"
llm-eval = "llm_trainer.scripts.evaluate:main"

[project.urls]
Source = "https://github.com/HelpingAI/llm-trainer"
Tracker = "https://github.com/HelpingAI/llm-trainer/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.3.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
]
distributed = [
    "deepspeed>=0.9.0",
]
mixed-precision = [
    "apex",
]
safetensors = [
    "safetensors>=0.3.0",
]
full = [
    # All optional dependencies
    "pytest>=7.3.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "deepspeed>=0.9.0",
    "apex",
    "safetensors>=0.3.0",
]

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["llm_trainer*"]
exclude = ["__pycache__", "*.pyc"]
namespaces = true

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.yaml", "*.yml", "*.py", "*.json"]
"llm_trainer" = ["*"]

[tool.setuptools.dynamic]
version = {attr = "llm_trainer.__version__"}
authors = {attr = "llm_trainer.__authors__"}

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]